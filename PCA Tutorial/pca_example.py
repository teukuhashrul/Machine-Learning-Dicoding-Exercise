# -*- coding: utf-8 -*-
"""PCA Example

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1pruNoaHEZ5FUPkPaEa2VR2egeND37bKF
"""



"""Lets Implement PCA Example"""

from sklearn.decomposition import PCA 
from sklearn.model_selection import train_test_split 
from sklearn import datasets

"""To try implement PCA, we can use library from sklearn. We will use iris dataset"""

iris = datasets.load_iris() 
attribute = iris.data 
label = iris.target 

iris.keys()
# split to train test 

x_train, x_test , y_train , y_test = train_test_split(attribute,label, test_size = 0.2)

"""We wil use decision tree and count the accuracy without PCA. Accuracy without PCA is 0.9."""

from sklearn import tree 
decision_tree = tree.DecisionTreeClassifier() 
model = decision_tree.fit(x_train , y_train) 
# evaluate prediction score 
model.score(x_test, y_test)

"""Now we will use PCA and count variance for each PC generated . 1 feature generate 1 PC so N feature will have N PC."""

# create PCA object with 4 principal component ,because there is 4 feature
pca =PCA(n_components=4)

# mengaplikasikan PCA with dataset 

pca_attributes = pca.fit_transform(x_train) 

# generate variance for eacha attribute  / PC 
pca.explained_variance_ratio_

"""Since first 2 feature already have sum of variance of 0.96, we choose only 2 first components with highest variance"""

pca = PCA(n_components=2) 
x_train_pca = pca.fit_transform(x_train) 
x_test_pca  = pca.fit_transform(x_test) 

# lets evaluate new generated feature from pca 
model_new = decision_tree.fit(x_train_pca, y_train) 
model_new.score(x_test_pca , y_test)

"""T"""